#!/usr/bin/env python3

import os
from vx_library import init_setup

Setup, SetupTask, Commands = init_setup()

CURRENT_PATH = os.path.dirname(os.path.abspath(__file__))
VX_ENV_PATH = "/opt/vixen-env"

Setup(
    purpose="Setup Vixen Shell",
    tasks=[
        SetupTask(
            purpose="Create Vixen evironment",
            command=Commands.create_env(VX_ENV_PATH),
            undo_command=Commands.remove_folder(VX_ENV_PATH),
            requirements=[
                {
                    "purpose": "Check an existing folder environment",
                    "callback": Commands.Checkers.folder_not_exists(VX_ENV_PATH),
                    "failure_message": f"Folder '{VX_ENV_PATH}' already exists",
                }
            ],
        ),
        SetupTask(
            purpose="Install dependencies",
            command=Commands.install_dependencies(VX_ENV_PATH, CURRENT_PATH),
        ),
        SetupTask(
            purpose="Install Vixen Shell Library",
            command=Commands.install_package(VX_ENV_PATH, CURRENT_PATH),
            undo_command=Commands.remove_package(VX_ENV_PATH, "vx_library"),
        ),
        SetupTask(
            purpose="Remove build folders",
            command=Commands.remove_build_folder(CURRENT_PATH),
        ),
        SetupTask(
            purpose="Install Vixen Manager executable",
            command=Commands.copy_file(CURRENT_PATH + "/vxm", "/usr/bin", True),
            undo_command=Commands.remove_file("/usr/bin/vxm"),
        ),
        SetupTask(
            purpose="Patch Vixen Manager executable",
            command=Commands.path_executable_env(VX_ENV_PATH, "/usr/bin/vxm"),
        ),
    ],
).run()
